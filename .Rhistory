pip install shinylive --upgrade
pip install shinylive --upgrade
library(shinylive)
library(shinylive)
quarto check
library(reticulate)
py_install("shinylive")
py_install("shiny")
#| eval: true
#| echo: false
theme_light <- function() {
theme_minimal(base_size = 14) %+%
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
text = element_text(colour = "black"),
axis.text = element_text(colour = "black"),
rect = element_rect(colour = "white", fill = "black"),
plot.background = element_rect(fill = "white", colour = NA),
plot.subtitle = element_text(colour="#615f60"),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(colour = "black")
)
}
theme_dark <- function() {
theme_minimal(base_size = 14) %+%
theme(
panel.border = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
text = element_text(colour = "white"),
axis.text = element_text(colour = "white"),
rect = element_rect(colour = "#272b30", fill = "#272b30"),
plot.background = element_rect(fill = "#272b30", colour = NA),
plot.subtitle = element_text(colour="white"),
axis.line = element_line(colour = "white"),
axis.ticks = element_line(colour = "white")
)
}
darksvglite <- function(file, width, height) {
on.exit(reset_theme_settings())
theme_set(theme_dark())
ggsave(
filename = file,
width = width,
height = height,
dev = "svg",
bg = "transparent"
)
}
wbs_raw <-readxl::read_excel("list_tasks.xlsx",
sheet=1,
skip =1)
wbs_raw <-readxl::read_excel("list_tasks.xlsx",
sheet=1,
skip wbs_raw <-readxl::read_excel("/home/ricardors/rrs_website/rruiz-s.github.io/posts/2025-07-23-post-graph/list_tasks.xlsx",
wbs_raw <-readxl::read_excel("/home/ricardors/rrs_website/rruiz-s.github.io/posts/2025-07-23-post-graph/list_tasks.xlsx",
sheet=1,
skip =1)
library(tidyverse)
# First, rename those column's name. Why doing this first? Because the new names will be easier to select.
wbs_renamed <-  wbs_raw |>
rename(fecha_inicio=`Fecha Inicio`,
fecha_fin = `Fecha Fin`,
duracion_estimada = `Duración Estimada`,
asignado_a = `Asignado a`,
titulo = Título)
# Second, Select the columns with data excluding those with missing values (NA)
wbs_cleaned <- wbs_renamed |>
select(c(titulo,fecha_inicio, fecha_fin, duracion_estimada,asignado_a))
# Last, let's impose our will to the computer saying that the dates are dates, not a simple text
wbs_tidy <- wbs_cleaned |>
mutate(fecha_inicio = as.Date(fecha_inicio, format=c("%d/%m/%Y")),
fecha_fin = as.Date(fecha_fin, format=c("%d/%m/%Y")))
wbs_tidy_long <- wbs_tidy |>
pivot_longer(cols=c(fecha_inicio, fecha_fin),
names_to="date_type",
values_to="date")
library(ggplot2)
ggplot() +
geom_line(data=wbs_tidy_long, mapping=aes(x=fct_rev(fct_inorder(titulo)), y=date, color=asignado_a), linewidth=10) +
### titles
labs(
x = "WBS",
y="August 2025",
colour = "Responsible",
) +
theme_linedraw() +
## Event 1
geom_hline(yintercept = as.Date("2025-08-17"), colour ="red", linetype="longdash") +
geom_label(aes(x="work package 3", y =as.Date("2025-08-17"),
label="Milestone"), hjust= -0.05, vjust= -2.0,color="red", fill="white", inherit.aes = FALSE ) +
theme(plot.title = element_text(hjust=.5, face="bold",size= 22),
axis.text.y = element_text(size=12),
axis.text.x = element_text(angle=45, vjust=-0.001),
plot.subtitle = element_text(hjust=.5, size=18, colour = "gray45"),
legend.position = "bottom",
plot.margin=unit(c(1,1,3,1), "lines")) +
scale_y_date(date_breaks = "1 day", date_labels ="%d") +
coord_flip()
lapply(c("tidyverse","slopes","ggplot2"),require, character.only=TRUE,)
lapply(c("tidyverse","slopes","ggplot2"),require, character.only=TRUE)
install.packages("slopes")
library(sf)
routes <- sf::read_sf("/home/ricardors/Downloads/Rutas_BTT_MTB_IMBA/Rutas_BTT_MTB_IMBA.shp")
routes
routes[1,]
## https://docs.ropensci.org/slopes/articles/slopes.html
library(slopes)
plot_slope(routes[1,])
plot_slope(routes[1,]) |> class()
plot_slope(routes[1,])
a <- plot_slope(routes[1,])
a
library(mapview)
mapview(routes)
install.packages("mapgl")
mapview(routes)
library(mapview)
library(mapview)
install.packages("mapview")
mapview (routes)
mapview(routes)
library(mapview)
mapview(routes)
library(leaflet)
leaflet::leaflet() |>
addProviderTiles()
leaflet::leaflet() |>
addProviderTiles("openstreetmap")
leaflet::providers
leaflet::leaflet() |>
addProviderTiles("HERE")
mapview()
slopes
## source: https://centrodedescargas.cnig.es/CentroDescargas/rutas-imba-bicicleta
routes <- sf::read_sf("/home/ricardors/Downloads/Rutas_BTT_MTB_IMBA/Rutas_BTT_MTB_IMBA.shp")
## https://docs.ropensci.org/slopes/articles/slopes.html
library(slopes)
mapview(routes)
mapview(sf::st_zm(routes))
library(shiny)
library(bslib)
library(mapgl)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
ui <- page_sidebar(
title = "mapgl with Shiny",
sidebar = sidebar(),
card(
full_screen = TRUE,
maplibreOutput("map")
)
)
server <- function(input, output, session) {
output$map <- renderMaplibre({
maplibre(style = carto_style("positron")) |>
fit_bounds(nc, animate = FALSE) |>
add_fill_layer(id = "nc_data",
source = nc,
fill_color = "blue",
fill_opacity = 0.5)
})
}
shinyApp(ui, server)
nc <- st_read(system.file("shape/nc.shp", package="sf")
nc <- st_read(system.file("shape/nc.shp", package="sf"))
library(shiny)
library(bslib)
library(mapgl)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
ui <- page_sidebar(
title = "mapgl with Shiny",
sidebar = sidebar(),
card(
full_screen = TRUE,
maplibreOutput("map")
)
)
server <- function(input, output, session) {
output$map <- renderMaplibre({
maplibre(style = carto_style("positron")) |>
fit_bounds(nc, animate = FALSE) |>
add_fill_layer(id = "nc_data",
source = nc,
fill_color = "blue",
fill_opacity = 0.5)
})
}
shinyApp(ui, server)
library(mapgl)
library(shiny)
library(bslib)
library(mapgl)
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
ui <- page_sidebar(
title = "mapgl with Shiny",
sidebar = sidebar(),
card(
full_screen = TRUE,
maplibreOutput("map")
)
)
server <- function(input, output, session) {
output$map <- renderMaplibre({
maplibre(style = carto_style("positron")) |>
fit_bounds(nc, animate = FALSE) |>
add_fill_layer(id = "nc_data",
source = nc,
fill_color = "blue",
fill_opacity = 0.5)
})
}
shinyApp(ui, server)
ui <- page_sidebar(
title = "mapgl with Shiny",
sidebar = sidebar(
verbatimTextOutput("clicked_feature")
),
card(
full_screen = TRUE,
maplibreOutput("map")
)
)
server <- function(input, output, session) {
output$map <- renderMaplibre({
maplibre(style = carto_style("positron")) |>
fit_bounds(nc, animate = FALSE) |>
add_fill_layer(id = "nc_data",
source = nc,
fill_color = "blue",
fill_opacity = 0.5)
})
output$clicked_feature <- renderPrint({
req(input$map_feature_click)
input$map_feature_click
})
}
shinyApp(ui, server)
routes_flat <- routes |>
sf::st_zm()
library(mapSpain)
install.packages("mapSpain")
library(mapSpain)
raster::getData("GADM", country="ES", level=0)
library(raster)
raster::getData("GADM", country="ES", level=0)
library(terra)
install.packages("geodata")
library(geodata)
?geodata::elevation_global()
routes
plot_slope(routes[1,])
plot_slope(routes[1,])
routes[1,]$geometry
coords(routes)
sf::st_coordinates(routes)
sf::st_coordinates(routes$geometry)
sf::st_coordinates(routes[1,]$geometry)
routes |>
st_coords()
x_diff <- routes |>
slice(1)
routes |>
slice(1)
routes |>
slice(1) |>
st_coords()
routes |>
slice(1) |>
sf::st_coordinates()
routes |>
slice(1) |>
sf::st_coordinates() |>
select(X) |>
diff()
routes |>
slice(1) |>
sf::st_coordinates() |>
select(X) |>
as.vector()|>
diff()
routes |>
slice(1) |>
sf::st_coordinates() |>
as.data.frame() |>
select(X) |>
as.vector() |>
diff()
# Transform
coords <- routes |>
slice(1) |>
sf::st_coordinates()
coords
coords |>
select(X) |>
diff()
coords |>
select(X) |>
as.vector()
coords |>
select(X) |>
as.data.frame()
coords |>
as.vectors()
coords |>
as.vector()
coords |>
select(X)
coords[,"X"]
coords[,"X"] |>
as.vector() |>
diff()
x_diff <- coords[,"X"] |>
as.vector() |>
diff()
routes[1,]
routes[1,] |> dim()
routes |> leaflet()
routes |> mapview()
mapview(routes)
mapview(routes_flat)
library(stplanr)
install.packages("stplanr")
routes_fast_sf
library(stplanr)
stplanr::routes_fast_sf
?overline
# Transform
library(stplanr)
routes_flat
routes_network <- stplanr::overline(routes,
attrib= "id")
routes_network
routes_network <- stplanr::overline(routes_flat,
attrib= "id")
routes_network <- stplanr::overline(routes_flat,
attrib= "id",
fun=first)
routes_network
routes_network |> mapview()
install.packages("sfnetworks")
install.packages("sfnetworks")
install.packages("igraph")
remotes::install_github("igraph/rigraph")
install.packages("sfnetworks")
routes_network <- stplanr::overline(routes_flat[1,],
attrib= "id",
fun=first)
routes_network
routes_network |> mapview()
routes_flat |> mapview()
routes_network <- stplanr::overline(
filter(routes_flat,name == "Mogea Luenga"),
attrib= "id",
fun=first)
routes_network <- stplanr::overline(
filter(routes_flat,nombre == "Mogea Luenga"),
attrib= "id",
fun=first)
routes_network |> mapview()
routes <- sf::read_sf("/home/ricardors/Downloads/GRXX0242_00E004_0_gr-242_etapa_04_frigiliana-nerja.gpx")
routes
# hojo segunda opción:https://www.r-bloggers.com/2013/02/elevation-profiles-in-r/
# Import data
## source: https://centrodedescargas.cnig.es/CentroDescargas/rutas-imba-bicicleta
## source: https://centrodedescargas.cnig.es/CentroDescargas/senderos-fedme
library(sf)
routes <- sf::read_sf("/home/ricardors/Downloads/GRXX0242_00E004_0_gr-242_etapa_04_frigiliana-nerja.gpx")
library(geodata)
