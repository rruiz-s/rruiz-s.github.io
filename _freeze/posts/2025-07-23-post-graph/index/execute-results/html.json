{
  "hash": "3c8f1fc120eeaab3903cb27359ac9358",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Gantt chart\nimage: heidelberg.jpg\ncategories: [PM, R, Python]\nbibliography: ../../references.bib\n  \nformat:\n  live-html:\n    output-file: index-live.html\n    toc: true\n    resources:\n      - list_tasks.xlsx\nengine: knitr\nwebr:\n  packages:\n    - ggplot2\n    - tidyverse\n    - readxl\npyodide:\n  packages:\n    - matplotlib\n    - pandas\n    - openpyxl\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\nThis quick fix is a small data science projects that builds a Gantt Chart using scripts in R [^1] and Python [^2]. A Gantt Chart is a bar plot that displays project activities as bars against time [@Meredith2017-jp] used to manage the schedule not only during the planning process group [^longnote], but also during controlling [@Silvius2013-gq]. The scope base line contains the project deliverables that are considered when building the schedule model [@Project_Management_Institute2017-vp]. The main strength of this technique is the ability to\n**clearly display the status** of each activity at a glance [@ec_pm2_2023].\n\n![](/../../assets/images/pm_time.png)\n\nBut is this relevant in the industry too? \n\nThe following quote is a main task in project controlling and reporting for a [job advertisment](https://www.linkedin.com/jobs/view/4236592119/?refId=a9d4caea-0c4c-4d32-b1fa-35426335c8cd&trackingId=2YD2QzwITHivk%2FbQIm4zkw%3D%3D&trk=flagship3_job_home_savedjobs) from Siemens as Project Manager. \n\n> Continuously monitor project **status**, taking the IFRS into consideration, identify any non-conformities in good time and initiate specific counter measures where applicable\n\nThe next figure is an example taken from @Snyder2017-do of a Gantt Chart\n\n![An example of a Gantt Chart according to PMBOK](/../../assets/images/gantt_chart_form.png){.lightbox}\nThe goal of this quick fix is to automatize the creation of a similar bar plot from a spradsheet file in R and Python.\n\n# Import\n\nIn this scenario a colleague has sent you a spreadsheet generated by proprietary software (Excel), although you insisted on exporting the file as .csv to follow the [5-start deployment of Open Data](https://5stardata.info/en/) as taught in GIMA to improve interoperability. It could be worse, it could have been a pdf file or word document. In the spreadsheet I added a nice merged first row as title to make things more interesting.\n\n:::{.panel-tabset group=\"language\"}\n\n# R\n\n\n\n\n::: {.cell}\n```{webr}\n#| label: import-data-r\n\nlibrary(readxl)\n# The argument skip allows you to forget the nice merged first row as title to obtain only structured-data.\nwbs_raw <-readxl::read_excel(\"list_tasks.xlsx\",\n                             sheet=1,\n                             skip =1)\n```\n:::\n\n\n\n\n# Python\n\n\n\n\n::: {.cell}\n```{pyodide}\n#| label: import-data-py\n\nimport pandas as pd\nwbs_raw = pd.read_excel('list_tasks.xlsx',\n                        sheet_name ='Hoja1',\n                        skiprows=1)\n```\n:::\n\n\n\n\n\n:::\n\n# Tidy\n\nWhy do we need to tidy the data? I thrive on chaos. Unfortunately, computer says no. Functions requires a specific type of data, missing values can be problematic and spaces and especial characters (i.e. accents, fancy letters such as ñ...) tend to make things too interesting (and complicated). Let's have a look\n\n\n:::{.panel-tabset group=\"language\"}\n\n# R\n\n\n\n\n::: {.cell}\n```{webr}\n#| label: structure-r\nlibrary(tidyverse)\nglimpse(wbs_raw)\n```\n:::\n\n\n\n\n# Python\n\n\n\n\n::: {.cell}\n```{pyodide}\nwbs_raw.info()\n```\n:::\n\n\n\n\n:::\n\nFirstly the missing values (aka Non Available - NA) are coherent, since your colleague does not know yet when the project was over, only the planned or estimated date. Secondly, the computer also says no when it sees spaces between the columns (aka fields or variable if well formated), so let's apply [snake case](https://www.freecodecamp.org/news/snake-case-vs-camel-case-vs-pascal-case-vs-kebab-case-whats-the-difference/) to them. Lastly, computer said dates (Fecha Inicio and Fecha Fin) are characters (text) and we say they are dates (time).\n\n:::{.panel-tabset group=\"language\"}\n\n# R\n\n\n\n\n::: {.cell}\n```{webr}\n#| label: tidy-data-r\n\n# First, rename those column's name. Why doing this first? Because the new names will be easier to select.\nwbs_renamed <-  wbs_raw |>\n  rename(fecha_inicio=`Fecha Inicio`,\n         fecha_fin = `Fecha Fin`,\n         duracion_estimada = `Duración Estimada`,\n         asignado_a = `Asignado a`,\n         titulo = Título)\n\n# Second, Select the columns with data excluding those with missing values (NA)\nwbs_cleaned <- wbs_renamed |>\n  select(c(titulo,fecha_inicio, fecha_fin, duracion_estimada,asignado_a))\n\n# Last, let's impose our will to the computer saying that the dates are dates, not a simple text\nwbs_tidy <- wbs_cleaned |>\n  mutate(fecha_inicio = as.Date(fecha_inicio, format=c(\"%d/%m/%Y\")),\n         fecha_fin = as.Date(fecha_fin, format=c(\"%d/%m/%Y\")))\nwbs_tidy_long <- wbs_tidy |> \n  pivot_longer(cols=c(fecha_inicio, fecha_fin),\n               names_to=\"date_type\",\n               values_to=\"date\")\n```\n:::\n\n\n\n\n# Python\n\n\n\n\n::: {.cell}\n```{pyodide}\n# First, rename those column's name. Why doing this first? Because the new names will be easier to select.\nwbs_raw.rename(columns={\"Fecha Inicio\":\"fecha_inicio\",\n                       \"Fecha Fin\": \"fecha_fin\",\n                       \"Duración Estimada\" : \"duracion_estimada\",\n                       \"Asignado a\":\"asignado_a\",\n                       \"Título\":\"titulo\"}, inplace=True)\n# Second, Select the columns with data excluding those with missing values (NA)\nwbs_cleaned= wbs_raw[['titulo','fecha_inicio', 'fecha_fin', 'duracion_estimada','asignado_a']].copy()\n# Last, let's impose our will to the computer saying that the dates are dates, not a simple text\nwbs_cleaned['fecha_fin']=pd.to_datetime(wbs_cleaned['fecha_fin'], format=\"%d/%m/%Y\")\nwbs_cleaned['fecha_inicio']=pd.to_datetime(wbs_cleaned['fecha_inicio'], format=\"%d/%m/%Y\")\n# Create extra columns\nimport datetime as dt\nwbs_cleaned['days_to_start']= (wbs_cleaned['fecha_inicio'] - wbs_cleaned['fecha_inicio'].min()).dt.days\nwbs_cleaned['days_to_end'] = (wbs_cleaned['fecha_fin'] - wbs_cleaned['fecha_inicio'].min()).dt.days\nwbs_cleaned['task_duration'] = wbs_cleaned['days_to_end'] - wbs_cleaned['days_to_start'] + 1\n```\n:::\n\n\n\n\n\n:::\n\n# Transform\n\nColors [⁴]\n\n:::{.panel-tabset group=\"language\"}\n\n# R\n\n\n\n\n::: {.cell}\n```{webr}\n#| label: fig-gantt\nlibrary(ggplot2)\nggplot() +\n  geom_line(data=wbs_tidy_long, mapping=aes(x=fct_rev(fct_inorder(titulo)), y=date, color=asignado_a), linewidth=10) +\n  ### titles\n  labs(\n    title =\"Schedule for project\",\n    subtitle = \"Made computer friendly\",\n    x = \"WBS\",\n    y=\"August 2025\",\n    colour = \"Responsible\", \n  ) +\ntheme_linedraw() +\n   ## Event 1\n  geom_hline(yintercept = as.Date(\"2025-08-17\"), colour =\"red\", linetype=\"longdash\") +\n  geom_label(aes(x=\"work package 3\", y =as.Date(\"2025-08-17\"),\n                 label=\"Milestone\"), hjust= -0.05, vjust= -2.0,color=\"red\", fill=\"white\", inherit.aes = FALSE ) +\ntheme(plot.title = element_text(hjust=.5, face=\"bold\",size= 22),\n      axis.text.y = element_text(size=12),\n      axis.text.x = element_text(angle=45, vjust=-0.001),\n      plot.subtitle = element_text(hjust=.5, size=18, colour = \"gray45\"),\n      legend.position = \"bottom\",\n      plot.margin=unit(c(1,1,3,1), \"lines\")) +\nscale_y_date(date_breaks = \"1 day\", date_labels =\"%d\") +\ncoord_flip() \n\n```\n:::\n\n\n\n\n# Python\n\n\n\n\n::: {.cell}\n```{pyodide}\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport matplotlib\n\nteam_colors = {'person A': 'c', 'person B': 'm', 'person C': 'y', 'person D': 'b'}\npatches = []\nfor asignado_a in team_colors:\n    patches.append(matplotlib.patches.Patch(color=team_colors[asignado_a]))\n\nfig, ax = plt.subplots()\nfor index, row in wbs_cleaned.iterrows():\n  plt.barh(y=row['titulo'],\n         width=row['task_duration'],\n         left=row['days_to_start'],\n         color=team_colors[row['asignado_a']])\nplt.title('Schedule for project', fontsize=15)\nplt.gca().invert_yaxis()\n# Base date: earliest fecha_inicio\nbase = wbs_cleaned['fecha_inicio'].min()\n# Generate daily dates from min(fecha_inicio) to max(fecha_fin)\ndates = pd.date_range(start=base, end=wbs_cleaned['fecha_fin'].max(), freq='D')\n# Tick positions\nxticks = (dates - base).days\n# Labels \nxticklabels = dates.strftime(\"%d\")\nplt.xlabel(\"August 2025\")\nplt.xticks(xticks, xticklabels)\nax.axvline(x=4, color='r', linestyle='dashed')\nax.text(x=4.5, y=0.55, s='Milestone', color='r')\nax.legend(handles=patches, labels=team_colors.keys(), fontsize=11)\nplt.show()\n\n```\n:::\n\n\n\n\n:::\n\n# Visualize\n\n# Communicate\n\n# Conclussion\n\n# Acknowledgment\n\n- How to fix [Object.renameSync](https://github.com/quarto-dev/quarto-cli/issues/10544)\n# References\n\n[^1]: [Tutorial in R to build Gantt Charts by Zach Bogart and Joyce Robbins from EDAV19, Colorado University](https://jtr13.github.io/cc19/gantt-charts.html)\n[^2]: [Tutorial in Python to build Gantt Charts by Elena Kosourova from Datacamp](https://www.datacamp.com/tutorial/how-to-make-gantt-chart-in-python-matplotlib)\n[^4]: [Tutorial in Python about colours in matplotlib](https://mljar.com/blog/matplotlib-colors/)\n[^longnote]: From a manager view on a project, the five group processes are: <br> 1. Initiation,2. Planning,3. Implementation,4. Controlling and 5. Closing of planning\n[^longnote2]: The warnings from the code are silenced using the execute [options in the YML](https://quarto.org/docs/computations/execution-options.html) file named _metadata.yml that applies to all posts\n[^longnote3]: This [website](https://quarto-webr.thecoatlessprofessor.com/qwebr-loading-data.html) shows different options to load data in live-html ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}