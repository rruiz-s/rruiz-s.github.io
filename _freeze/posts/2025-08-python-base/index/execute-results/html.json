{
  "hash": "429a286821cb894d3bc9eb2b82ed6a49",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"SIOSE\"\ndescription: \"Exercise 1: JOINS\"\nimage: edinburgh.jpg\ncomments:\n  utterances: \n    repo: rruiz-s/rruiz-s.github.io\nauthor:\n  - name: Ricardo Ruiz Sánchez\ncategories:\n  - Transform\n  - PostGIS\n  - QGIS\n  - TYC GIS-IMFE \nformat: \n  html: \n    code-fold: true\n---\n\n::: {.cell incldue='falsel'}\n\n:::\n\n\n\n\n# Exercise A\n\nCompleta la capa del SIOSE de la provincia de Castellón con la descripción del tipo de cobertura, para ello debemos relacionar la capa SIOSE_CASTELLON.shp con su leyenda. La leyenda se encuentra desglosada en 2 tablas T_VALORES y TC_SIOSE_COBERTURAS. Estudia las tablas, para establecer las relaciones necesarias entre ellas y así lograr incorporar la información de cobertura a la capa SIOSE. Nota: La capa SIOSE_CASTELLON.shp ha sido tomada en el S.C. ETRS89 UTM 30N. Finalmente representa la capa a través del campo cobertura con un tipo de simbología adecuado.\n\n\n\nCapas a utilizar: \n\n- SIOSE_CASTELLON.shp\n- T_VALORES\n- T_COBERTURAS\n\n![](/media/tyc_imfe_exercise_1_1_table.png)\n\n## PostGIS\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE siose AS \nSELECT\n\ts.geom,\n\tv.\"ID_COBERTURAS\" AS cobertura_id,\n\tc.\"DESCRIPCION_COBERTURAS\" AS description\nFROM\n\tsiose_shape AS s\nJOIN siose_valores AS v ON  v.\"ID_POLYGON\" = s.\"ID_POLYGON\" \nJOIN siose_coberturas AS c ON c.\"ID_COBERTURAS\" = v.\"ID_COBERTURAS\" \n```\n:::\n\n\n\n\n## QGIS\n\n![](/media/tyc_imfe_exercise_1_2_table.png)\n\n# Exercise B\n\nWe use the tool \"join\" to link the Corine Land Over (CLC_ambito.shp) layer to its legend (excel spreadsheet). Name it \"CLC_LEGEND.shp\" to the resulting joined layer.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"In spanish\"}\ncat(\"Utilizamos la herramienta join para relacionar la capa del Corine Land Cover (CLC_ambito.shp) con su leyenda (hoja Excel CLC2000legend.xls). Llama 'CLC_LEYEDA.shp' a la capa resultante de la unión \n\nCapas a utilizar:\n- CLC_ambito.shp\n- CLC2000legend.xls\")\n```\n:::\n\n\n\n\n## PostGIS\n\nImport the data is possible using [ogr2ogr](https://gdal.org/en/latest/programs/ogr2ogr.html) or [shp2pgsql](https://www.bostongis.com/pgsql2shp_shp2pgsql_quickguide.bqg). The following ogr2ogr command import the data, since it combines polygon and multipolygon, it is need to add the parameter -nln ([post](https://trac.osgeo.org/gdal/ticket/4939))\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"ogr2ogr command to import the shp data\"}\nogr2ogr -f PostgreSQL PG:\"host=localhost port=25432 user=docker password=docker dbname=gis schemas=tycgis\" CLC_ambito.shp -nln clc_ambito -lco GEOMETRY_NAME=geom -nlt PROMOTE_TO_MULTI\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n--- Explore relevant data, columns used for join & srid of the geometry\nSELECT pg_typeof(code_06) FROM clc_ambito; ---character\nSELECT pg_typeof(\"CLC_CODE\") FROM clc2000legend; ---integer\nSELECT st_srid(geom) FROM  clc_ambito ;  --- check srid is imported correctly automatically\n---- Create table CLC_LEYENDA\nCREATE TABLE CLC_LEYENDA AS\nSELECT \n\t*,\n\treplace(xls,\"RGB\", '-',',')AS RGB_csv \nFROM \n\tclc_ambito AS shp\nLEFT JOIN  \n\tclc2000legend AS xls\nON shp.code_06::int = xls.\"CLC_CODE\"; --- the ::int cast the character into integer.\n```\n:::\n\n\n\n\nNote:\n- The column \"RGB\" stored the colour values and it was used replacing the \"-\" for \",\" as [this post](https://www.reddit.com/r/QGIS/comments/15lcb0l/rgb_color_code_from_attribute_table/) indicated.  If the RGB values were in three different columns, then [this other post](https://gis.stackexchange.com/questions/15135/using-field-to-rgb-mapping-for-symbology-in-qgis) would have applied.\n\n![](/media/rgb_csv_exercise_1.png)\n\n## QGIS\n\nAfter clicking on properties of the selected vector data _\"CLC_ambito_qgis\"_ and join, the following screenshot shows the parameters required to add columns from the spreadsheet _\"CLC2000legend.xls\"_.    \n\n![](/media/join_parameters.png)\n\n# IMFE Use case\n\n- [Municipality layer with geometries](https://idemap.es/sitmap/visor.html)\n- [Additional data for Málaga in csv](https://www.malaga.es/gobiernoabierto/datosabiertos/catalogodatos/com1_md1_cd-198098/cnl-594/malaga-en-cifras)\n\nImporting the file malaga-en-cifras_v2.csv using dbeaver returned errors, since the string contained \"..\". Using R to write the table was a workaround to import the data in the spreadsheet to the database.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"importing csv to PostgreSQL DB using R\"}\nmalaga_cifras <- read.csv(\"/home/ricardo/cursos-2024-2025/Unidad 1/ejercicio1/malaga-en-cifras_v2.csv\", sep=\",\")\nDBI::dbWriteTable(docker_connection,  Id(schema = \"tycgis\", table = \"malaga_cifras\"),malaga_cifras)\n```\n:::\n\n\n\n\n\nFor the vector data, the error _\"ERROR 1: Non UTF-8 content found when writing feature\"_ is solved following [this post](https://stackoverflow.com/questions/1377662/encoding-problems-with-ogr2ogr-and-postgis-postgresql-database) where it explains how to use other encoding systems.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"importing vector data to PostgreSQL DB using ogr2ogr\"}\nPGCLIENTENCODING=LATIN1 ogr2ogr -f PostgreSQL PG:\"host=localhost port=25432 user=docker password=docker dbname=gis schemas=tycgis\" sitmap_municipios_viewPolygon.shp -nln municipalities_agp -lco GEOMETRY_NAME=geom -nlt PROMOTE_TO_MULTI\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE muncipalities_agp_crop AS\nSELECT \n\tcodigo AS code,\n\tshape.nombre AS muncipality,\n\tcsv.\"Principal.cultivo.leñoso.de.regadío..2011\" AS woody_crops_2011,\n\tshape.geom\nFROM \n\tmunicipalities_agp AS shape\nLEFT JOIN \n\tmalaga_cifras AS csv\nON \n\t\"Id_Municipio\" = codigo::integer\nWHERE \"Principal.cultivo.leñoso.de.regadío..2011\" NOT IN ('-','..');\n```\n:::\n\n\n\n\n![](/media/tyc_imfe_exercise_imfe_2.png)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}